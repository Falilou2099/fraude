#!/bin/bash

# Script de migration vers RDS PostgreSQL
# Ce script pr√©pare et migre la base de donn√©es locale vers RDS

set -e

echo "üöÄ Script de migration vers RDS PostgreSQL"
echo "=========================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier si Node.js est install√©
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier si npm est install√©
    if ! command -v npm &> /dev/null; then
        log_error "npm n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier si Prisma CLI est disponible
    if ! command -v npx &> /dev/null; then
        log_error "npx n'est pas disponible"
        exit 1
    fi
    
    # V√©rifier si psql est install√© (optionnel)
    if ! command -v psql &> /dev/null; then
        log_warning "psql n'est pas install√©. Recommand√© pour les tests de connexion."
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Configuration des variables d'environnement
setup_environment() {
    log_info "Configuration de l'environnement..."
    
    # V√©rifier si le fichier .env existe
    if [ ! -f .env ]; then
        if [ -f env.example ]; then
            log_info "Copie du fichier env.example vers .env"
            cp env.example .env
            log_warning "Veuillez modifier le fichier .env avec vos vraies valeurs RDS"
            log_warning "DATABASE_URL doit pointer vers votre instance RDS PostgreSQL"
            echo ""
            echo "Exemple de DATABASE_URL pour RDS :"
            echo "DATABASE_URL=\"postgresql://username:password@your-rds-endpoint.region.rds.amazonaws.com:5432/database_name\""
            echo ""
            read -p "Appuyez sur Entr√©e apr√®s avoir configur√© le fichier .env..."
        else
            log_error "Fichier env.example introuvable. Cr√©ez un fichier .env manuellement."
            exit 1
        fi
    fi
    
    # Charger les variables d'environnement
    if [ -f .env ]; then
        export $(cat .env | grep -v '^#' | xargs)
    fi
    
    # V√©rifier que DATABASE_URL est configur√©
    if [ -z "$DATABASE_URL" ]; then
        log_error "DATABASE_URL n'est pas configur√© dans le fichier .env"
        exit 1
    fi
    
    log_success "Environnement configur√©"
}

# Installation des d√©pendances
install_dependencies() {
    log_info "Installation des d√©pendances..."
    npm install
    log_success "D√©pendances install√©es"
}

# G√©n√©ration du client Prisma
generate_prisma_client() {
    log_info "G√©n√©ration du client Prisma..."
    npm run db:generate
    log_success "Client Prisma g√©n√©r√©"
}

# Test de connexion √† la base de donn√©es
test_database_connection() {
    log_info "Test de connexion √† la base de donn√©es..."
    
    # Utiliser Prisma pour tester la connexion
    node -e "
        const { PrismaClient } = require('@prisma/client');
        const prisma = new PrismaClient();
        
        async function testConnection() {
            try {
                await prisma.\$connect();
                console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');
                await prisma.\$disconnect();
                process.exit(0);
            } catch (error) {
                console.error('‚ùå Erreur de connexion:', error.message);
                process.exit(1);
            }
        }
        
        testConnection();
    "
    
    if [ $? -eq 0 ]; then
        log_success "Connexion √† la base de donn√©es test√©e avec succ√®s"
    else
        log_error "√âchec du test de connexion √† la base de donn√©es"
        exit 1
    fi
}

# Migration de la base de donn√©es
migrate_database() {
    log_info "Migration de la base de donn√©es..."
    
    # Appliquer les migrations
    npm run db:push
    
    if [ $? -eq 0 ]; then
        log_success "Migrations appliqu√©es avec succ√®s"
    else
        log_error "√âchec des migrations"
        exit 1
    fi
}

# Initialisation des donn√©es
initialize_data() {
    log_info "Initialisation des donn√©es par d√©faut..."
    
    # Cr√©er les utilisateurs par d√©faut
    log_info "Cr√©ation des utilisateurs par d√©faut..."
    curl -s -X POST http://localhost:3000/api/auth/init > /dev/null 2>&1 || {
        log_warning "Impossible de cr√©er les utilisateurs via API (serveur non d√©marr√©)"
        log_info "Les utilisateurs seront cr√©√©s au premier d√©marrage de l'application"
    }
    
    # Cr√©er les composants d'exemple
    log_info "Cr√©ation des composants d'exemple..."
    curl -s -X POST http://localhost:3000/api/components/init > /dev/null 2>&1 || {
        log_warning "Impossible de cr√©er les composants via API (serveur non d√©marr√©)"
        log_info "Les composants d'exemple seront cr√©√©s au premier d√©marrage de l'application"
    }
    
    log_success "Initialisation des donn√©es termin√©e"
}

# Sauvegarde de la base de donn√©es (optionnel)
backup_database() {
    if [ "$1" = "--backup" ]; then
        log_info "Cr√©ation d'une sauvegarde de la base de donn√©es..."
        
        # Extraire les informations de connexion de DATABASE_URL
        DB_INFO=$(echo $DATABASE_URL | sed 's/postgresql:\/\/\([^:]*\):\([^@]*\)@\([^:]*\):\([^\/]*\)\/\(.*\)/\1 \2 \3 \4 \5/')
        read DB_USER DB_PASS DB_HOST DB_PORT DB_NAME <<< "$DB_INFO"
        
        # Cr√©er le dossier de sauvegarde
        mkdir -p backups
        
        # Nom du fichier de sauvegarde avec timestamp
        BACKUP_FILE="backups/backup_$(date +%Y%m%d_%H%M%S).sql"
        
        # Cr√©er la sauvegarde
        PGPASSWORD=$DB_PASS pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME > $BACKUP_FILE
        
        if [ $? -eq 0 ]; then
            log_success "Sauvegarde cr√©√©e: $BACKUP_FILE"
        else
            log_warning "√âchec de la sauvegarde (pg_dump requis)"
        fi
    fi
}

# V√©rification post-migration
post_migration_check() {
    log_info "V√©rification post-migration..."
    
    # V√©rifier que les tables existent
    node -e "
        const { PrismaClient } = require('@prisma/client');
        const prisma = new PrismaClient();
        
        async function checkTables() {
            try {
                const users = await prisma.user.count();
                const components = await prisma.component.count();
                
                console.log('‚úÖ Tables v√©rifi√©es:');
                console.log('   - Users:', users, 'enregistrements');
                console.log('   - Components:', components, 'enregistrements');
                
                await prisma.\$disconnect();
                process.exit(0);
            } catch (error) {
                console.error('‚ùå Erreur lors de la v√©rification:', error.message);
                process.exit(1);
            }
        }
        
        checkTables();
    "
    
    if [ $? -eq 0 ]; then
        log_success "V√©rification post-migration r√©ussie"
    else
        log_error "√âchec de la v√©rification post-migration"
        exit 1
    fi
}

# Fonction principale
main() {
    echo ""
    log_info "D√©but de la migration vers RDS PostgreSQL"
    echo ""
    
    # V√©rifier les arguments
    BACKUP_FLAG=""
    if [ "$1" = "--backup" ]; then
        BACKUP_FLAG="--backup"
        log_info "Mode sauvegarde activ√©"
    fi
    
    # Ex√©cuter les √©tapes
    check_prerequisites
    setup_environment
    install_dependencies
    generate_prisma_client
    test_database_connection
    backup_database $BACKUP_FLAG
    migrate_database
    initialize_data
    post_migration_check
    
    echo ""
    log_success "üéâ Migration vers RDS PostgreSQL termin√©e avec succ√®s!"
    echo ""
    echo "Prochaines √©tapes:"
    echo "1. D√©marrez l'application: npm run dev"
    echo "2. Testez la connexion admin/admin123"
    echo "3. V√©rifiez que les composants s'affichent correctement"
    echo ""
    echo "Pour la production:"
    echo "1. Configurez les variables d'environnement sur votre serveur"
    echo "2. Utilisez: npm run deploy"
    echo "3. Suivez le guide README-EC2.md pour le d√©ploiement"
    echo ""
}

# Gestion des erreurs
trap 'log_error "Script interrompu"; exit 1' INT TERM

# Ex√©cuter le script principal
main "$@"
